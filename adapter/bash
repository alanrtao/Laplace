function __laplace() {
    exec 2220< <(env -0)
    exec 2221< <(while IFS="" read A; do printf $A=; alias $A; printf "\0"; done < <(compgen -a))
    exec 2222< <(printf "_="; shopt -p) # don't break shopt output, there's no point
    exec 2223< <(while IFS="" read F; do printf $(echo $F | cut -c 12-)=; $F; printf "\0"; done < <(declare -F))

    # there is also a DEBUG trap but we are taking up that
    # the section here is to prevent using a subshell, we first generate the for loop
    # code to a temp file, then source that code in the current shell
    srcf=$(mktemp)

    tmpf=$(mktemp -u)
    exec 2224<>$tmpf
    for SIG in $(seq 0 64) ERR RETURN; do
      echo "trap -p ${SIG} >>${tmpf}">>$srcf
      echo "printf \"\\0\" >>${tmpf}">>$srcf
    done

    source $srcf
    rm $srcf

    echo $1 | /bin/laplace \
    -i PROMPT_COMMAND -i __laplace \
    2220 env 2221 alias 2222 shopt 2223 func 2224 trap

    exec 2220<&-
    exec 2221<&-
    # exec 2222<&-
    exec 2223<&-
    exec 2224<&-
}

function __laplace_precommand() {
  # https://jichu4n.com/posts/debug-trap-and-prompt_command-in-bash/
  # prevents trap from executing within post command
  if [ -z "$AT_PROMPT" ]; then
    return
  fi
  unset AT_PROMPT
  trap - SIGUSR1

  # for "subcommands" within the same command entered from prompt, only send
  # the command itself without diffing the shell state
  echo "$BASH_COMMAND" | /bin/laplace
}

function __laplace_postcommand() {
  AT_PROMPT=1

  # for checkpoints, actually submit the entire state for diffing purposes
  __laplace "__laplace"

  exec 2220< <(env -0)
  exec 2221< <(while IFS="" read A; do printf $A=; alias $A; printf "\0"; done < <(compgen -a))
  exec 2222< <(printf "_="; shopt -p) # don't break shopt output, there's no point
  exec 2223< <(while IFS="" read F; do printf $(echo $F | cut -c 12-)=; $F; printf "\0"; done < <(declare -F))
  
  trap "__laplace_precommand" DEBUG
}

PROMPT_COMMAND="__laplace_postcommand"

