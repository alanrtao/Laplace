unset PWD
unset SHLVL
export FPATH=/root/apps/lmod/lmod/init/ksh_funcs

export LMOD_CMD=/root/apps/lmod/lmod/libexec/lmod

export LMOD_ROOT=/root/apps/lmod

export LMOD_DIR=/root/apps/lmod/lmod/libexec

export LMOD_PKG=/root/apps/lmod/lmod

export LMOD_SETTARG_FULL_SUPPORT=no

export MODULESHOME=/root/apps/lmod/lmod

export LMOD_VERSION=8.7.59

export _ModuleTable_Sz_=1

export MODULEPATH=/root/modulefiles

export _ModuleTable001_=X01vZHVsZVRhYmxlXyA9IHsKTVR2ZXJzaW9uID0gMywKY19yZWJ1aWxkVGltZSA9IGZhbHNlLApjX3Nob3J0VGltZSA9IGZhbHNlLApkZXB0aFQgPSB7fSwKZmFtaWx5ID0ge30sCm1UID0gewpnY2MgPSB7CmZuID0gIi9yb290L21vZHVsZWZpbGVzL2djYy8xMy4zLjAubHVhIiwKZnVsbE5hbWUgPSAiZ2NjLzEzLjMuMCIsCmxvYWRPcmRlciA9IDEsCnByb3BUID0ge30sCnN0YWNrRGVwdGggPSAwLApzdGF0dXMgPSAiYWN0aXZlIiwKdXNlck5hbWUgPSAiZ2NjIiwKd1YgPSAiMDAwMDAwMDEzLjAwMDAwMDAwMy4qemZpbmFsIiwKfSwKfSwKbXBhdGhBID0gewoiL3Jvb3QvbW9kdWxlZmlsZXMiLAp9LAp9Cg==

export __LMOD_REF_COUNT_MODULEPATH=/root/modulefiles:1

export CC=gcc

export CXX=g++

export F77=gfortran

export FC=gfortran

export LOADEDMODULES=gcc/13.3.0

export _LMFILES_=/root/modulefiles/gcc/13.3.0.lua

_module_not_yet_loaded () 
{ 
    comm -23 <(_module_avail | sort) <(_module_loaded_modules | sort)
}


_module_mcc () 
{ 
    /root/apps/lmod/lmod/libexec/lmod bash -q -t --no_redirect savelist 2>&1 > /dev/null
}


_module_long_arg_list () 
{ 
    local cur="${1}" i;
    if [[ ${COMP_WORDS[COMP_CWORD-2]} == sw* ]]; then
        COMPREPLY=($(compgen -W "$(_module_not_yet_loaded)" -- "${cur}"));
        return;
    fi;
    for ((i = COMP_CWORD - 1; i > 0; i--))
    do
        case ${COMP_WORDS[${i}]} in 
            add | load)
                COMPREPLY=($(compgen -W "$(_module_not_yet_loaded)" -- "${cur}"));
                break
            ;;
            rm | remove | unload | switch | swap)
                COMPREPLY=($(compgen -W "$(_module_loaded_modules)" -- "${cur}"));
                break
            ;;
        esac;
    done
}


_module_disable () 
{ 
    /root/apps/lmod/lmod/libexec/lmod bash -q -t --no_redirect savelist 2>&1 > /dev/null
}


_module_loaded_modules_negated () 
{ 
    /root/apps/lmod/lmod/libexec/lmod bash -q -t --no_redirect list 2>&1 > /dev/null | sed ' /^ *$/d; /:$/d; s#/*$##g; s|^|-|g; s/ *<[A-Za-z][A-Za-z]*>//'
}


ml () 
{ 
    eval "$($LMOD_DIR/ml_cmd "$@")"
}
declare -fx ml

_module () 
{ 
    local cur="${2}" prev="${3}" cmds opts;
    COMPREPLY=();
    cmds="add avail describe disable delete help keyword list load overview purge refresh restore rm        save show spider swap try-load unload unuse update use whatis";
    opts="-d -D -h -q -t -v -w -s --style --expert --quiet --help -H -b --brief         --quiet --terse --version --default --width -r --regexp --mt --latest         -I --ignore_cache --gitversion --dumpversion --dumpname --config              --miniConfig --timer -f --force --redirect --show_hidden -T --trace           --nx --no_extensions --loc --location --terse_show_extensions --pod           -A --all";
    case "${prev}" in 
        add | load | try-load)
            COMPREPLY=($(compgen -W "$(_module_not_yet_loaded)" -- "${cur}"))
        ;;
        rm | remove | unload | switch | swap)
            COMPREPLY=($(compgen -W "$(_module_loaded_modules)" -- "${cur}"))
        ;;
        restore)
            COMPREPLY=($(compgen -W "$(_module_savelist)" -- "${cur}"))
        ;;
        spider)
            COMPREPLY=($(compgen -W "$(_module_spider)" -- "${cur}"))
        ;;
        unuse)
            COMPREPLY=($(IFS=: compgen -W "${MODULEPATH}" -- "${cur}"))
        ;;
        use | *-a*)
            _module_dir "${cur}"
        ;;
        help | show | whatis)
            COMPREPLY=($(compgen -W "$(_module_avail)" -- "${cur}"))
        ;;
        describe | mcc)
            COMPREPLY=($(compgen -W "$(_module_mcc)" -- "${cur}"))
        ;;
        disable)
            COMPREPLY=($(compgen -W "$(_module_mcc)" -- "${cur}"))
        ;;
        *)
            if [ ${COMP_CWORD} -gt 2 ]; then
                _module_long_arg_list "${cur}";
            else
                case "${cur}" in 
                    ls)
                        COMPREPLY='list'
                    ;;
                    sw*)
                        COMPREPLY='swap'
                    ;;
                    -*)
                        COMPREPLY=($(compgen -W "${opts}" -- "${cur}"))
                    ;;
                    *)
                        COMPREPLY=($(compgen -W "${cmds}" -- "${cur}"))
                    ;;
                esac;
            fi
        ;;
    esac
}


xSetTitleLmod () 
{ 
    builtin echo -n -e "\033]2;$1\007"
}


clearMT () 
{ 
    eval $($LMOD_DIR/clearLMOD_cmd --shell bash --simple)
}


_module_describe () 
{ 
    /root/apps/lmod/lmod/libexec/lmod bash -q -t --no_redirect savelist 2>&1 > /dev/null
}


_module_spider () 
{ 
    /root/apps/lmod/lmod/libexec/lmod bash -q -t --no_redirect spider 2>&1 > /dev/null
}


clearLmod () 
{ 
    module --force purge;
    eval $($LMOD_DIR/clearLMOD_cmd --shell bash --full "$@")
}


_ml () 
{ 
    local cur="${2}" prev="${3}" cmds opts found;
    COMPREPLY=();
    cmds="add avail describe disable delete help keyword list load overview purge refresh restore rm        save show spider swap try-load unload unuse update use whatis";
    opts="-d -D -h -q -t -v -w -s --style --expert --quiet --help -H -b --brief         --quiet --terse --version --default --width -r --regexp --mt --latest         -I --ignore_cache --gitversion --dumpversion --dumpname --config              --miniConfig --timer -f --force --redirect --show_hidden -T --trace           --nx --no_extensions --loc --location --terse_show_extensions --pod           -A --all";
    case "${prev}" in 
        rm | remove | unload | switch | swap)
            COMPREPLY=($(compgen -W "$(_module_loaded_modules)" -- "${cur}"))
        ;;
        restore)
            COMPREPLY=($(compgen -W "$(_module_savelist)" -- "${cur}"))
        ;;
        spider)
            COMPREPLY=($(compgen -W "$(_module_spider)" -- "${cur}"))
        ;;
        unuse)
            COMPREPLY=($(IFS=: compgen -W "${MODULEPATH}" -- "${cur}"))
        ;;
        use | *-a*)
            _module_dir "${cur}"
        ;;
        help | show | whatis)
            COMPREPLY=($(compgen -W "$(_module_avail)" -- "${cur}"))
        ;;
        *)
            case "${cur}" in 
                -*)
                    if [ ${COMP_CWORD} -eq 1 ]; then
                        COMPREPLY=($(compgen -W "${opts} $(_module_loaded_modules_negated)" -- "${cur}"));
                    else
                        COMPREPLY=($(compgen -W "        $(_module_loaded_modules_negated)" -- "${cur}"));
                    fi
                ;;
                *)
                    if [ ${COMP_CWORD} -eq 1 ]; then
                        case "${cur}" in 
                            ls)
                                COMPREPLY='list'
                            ;;
                            sw*)
                                COMPREPLY='swap'
                            ;;
                            *)
                                COMPREPLY=($(compgen -W "${cmds} $(_module_avail)" -- "${cur}"))
                            ;;
                        esac;
                    else
                        if [[ ${COMP_WORDS[COMP_CWORD-2]} == sw* ]]; then
                            COMPREPLY=($(compgen -W "$(_module_not_yet_loaded)" -- "${cur}"));
                        else
                            for ((i = COMP_CWORD - 1; i > 0; i--))
                            do
                                case ${COMP_WORDS[$i]} in 
                                    show | whatis)
                                        COMPREPLY=($(compgen -W "$(_module_avail)" -- "${cur}"));
                                        found=1;
                                        break
                                    ;;
                                    rm | remove | unload)
                                        COMPREPLY=($(compgen -W "$(_module_loaded_modules)" -- "${cur}"));
                                        found=1;
                                        break
                                    ;;
                                    spider)
                                        COMPREPLY=($(compgen -W "$(_module_spider)" -- "${cur}"));
                                        found=1;
                                        break
                                    ;;
                                esac;
                            done;
                            if [ -z "${found}" ]; then
                                COMPREPLY=($(compgen -W "$(_module_avail)" -- "${cur}"));
                            fi;
                        fi;
                    fi
                ;;
            esac
        ;;
    esac
}


_module_loaded_modules () 
{ 
    /root/apps/lmod/lmod/libexec/lmod bash -q -t --no_redirect list 2>&1 > /dev/null | sed ' /^ *$/d; /:$/d; s#/*$##g; s/ *<[A-Za-z][A-Za-z]*>//'
}


_module_savelist () 
{ 
    /root/apps/lmod/lmod/libexec/lmod bash -q -t --no_redirect savelist 2>&1 > /dev/null
}


module () 
{ 
    if [ -z "${LMOD_SH_DBG_ON+x}" ]; then
        case "$-" in 
            *v*x*)
                __lmod_sh_dbg='vx'
            ;;
            *v*)
                __lmod_sh_dbg='v'
            ;;
            *x*)
                __lmod_sh_dbg='x'
            ;;
        esac;
    fi;
    if [ -n "${__lmod_sh_dbg:-}" ]; then
        set +$__lmod_sh_dbg;
        echo "Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod's output" 1>&2;
    fi;
    eval "$($LMOD_CMD shell "$@")" && eval "$(${LMOD_SETTARG_CMD:-:} -s sh)";
    __lmod_my_status=$?;
    if [ -n "${__lmod_sh_dbg:-}" ]; then
        echo "Shell debugging restarted" 1>&2;
        set -$__lmod_sh_dbg;
    fi;
    unset __lmod_sh_dbg;
    return $__lmod_my_status
}
declare -fx module

_module_avail () 
{ 
    /root/apps/lmod/lmod/libexec/lmod bash --no_redirect -t -q avail 2>&1 > /dev/null | sed ' /:$/d; s/(@.*)//g; s#/*$##g; s/ *<[A-Za-z][A-Za-z]*>//;'
}


_module_dir () 
{ 
    local cur="${1}" pattern i;
    if [[ "${cur:0:1}" == '$' ]]; then
        pattern='^\$[[:alnum:]_]+\/$';
        if [[ ${cur} =~ ${pattern} ]]; then
            eval COMPREPLY[0]="${cur}";
        else
            COMPREPLY=($(compgen -v -P '$' -- "${cur:1}"));
            local -a FILTEREDCOMPREPLY;
            for ((i=0; i < ${#COMPREPLY[@]}; i++))
            do
                pattern='^\$[[:alnum:]_]+$';
                if [[ ${COMPREPLY[$i]} =~ ${pattern} ]]; then
                    eval local env_val="${COMPREPLY[$i]}";
                    if [ -d "${env_val}" ]; then
                        FILTEREDCOMPREPLY+=(${COMPREPLY[$i]});
                    fi;
                fi;
            done;
            COMPREPLY=(${FILTEREDCOMPREPLY[@]});
        fi;
    else
        if [[ "${cur:0:1}" == '~' ]]; then
            if [[ "${cur}" != "${cur//\/}" ]]; then
                eval COMPREPLY[0]="${cur%%\/*}"/'${cur#*\/}';
            else
                eval COMPREPLY[0]="~";
            fi;
        else
            COMPREPLY=($(compgen -d -- "${cur}"));
        fi;
    fi;
    if [[ ${#COMPREPLY[@]} -eq 1 ]]; then
        pattern='\/$';
        if [[ -d "${COMPREPLY[0]}" && ! "${COMPREPLY[0]}" =~ ${pattern} ]]; then
            COMPREPLY[0]="${COMPREPLY[0]}/";
        fi;
        compopt -o nospace;
    fi
}


shopt -u autocd
shopt -u assoc_expand_once
shopt -u cdable_vars
shopt -u cdspell
shopt -u checkhash
shopt -u checkjobs
shopt -s checkwinsize
shopt -s cmdhist
shopt -u compat31
shopt -u compat32
shopt -u compat40
shopt -u compat41
shopt -u compat42
shopt -u compat43
shopt -u compat44
shopt -s complete_fullquote
shopt -u direxpand
shopt -u dirspell
shopt -u dotglob
shopt -u execfail
shopt -s expand_aliases
shopt -u extdebug
shopt -u extglob
shopt -s extquote
shopt -u failglob
shopt -s force_fignore
shopt -s globasciiranges
shopt -s globskipdots
shopt -u globstar
shopt -u gnu_errfmt
shopt -u histappend
shopt -u histreedit
shopt -u histverify
shopt -s hostcomplete
shopt -u huponexit
shopt -u inherit_errexit
shopt -s interactive_comments
shopt -u lastpipe
shopt -u lithist
shopt -u localvar_inherit
shopt -u localvar_unset
shopt -u login_shell
shopt -u mailwarn
shopt -u no_empty_cmd_completion
shopt -u nocaseglob
shopt -u nocasematch
shopt -u noexpand_translation
shopt -u nullglob
shopt -s patsub_replacement
shopt -s progcomp
shopt -u progcomp_alias
shopt -s promptvars
shopt -u restricted_shell
shopt -u shift_verbose
shopt -s sourcepath
shopt -u varredir_close
shopt -u xpg_echo

